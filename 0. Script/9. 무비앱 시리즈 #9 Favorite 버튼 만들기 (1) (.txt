9. 무비앱 시리즈 #9 Favorite 버튼 만들기 (1) ( 따라하며 배우는 리액트 노드 )

1. Favorite Model 만들기
 - Favorite
  - userFrom
  - movieId
  - movieTitle
  - movieImage
  - movieRunTime
2. Favorite Button UI 만들기
3. 얼마나 많은 사람이 이 영화를 Favorite 리스트에 넣었는지 그 숫자 정보 얻기
4. 내가 이 영화를 이미 Favorite 리스트에 넣었는지 아닌지 정보 얻기
5. 데이터를 화면에 보여주기
---
(server/models/Favorite.js)
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const favoriteSchema = mongoose.Schema({
    userFrom : {
        type : Schema.Types.ObjectId,   // User.js Model을 참조한다!
        ref : 'User'
    },
    movieId : {
        type : String
    },
    movieTitle : {
        type : String
    },
    moviePost : {
        type : String
    },
    movieRunTime : {
        type : String
    }
}, { timestamps : true })

const Favorite = mongoose.model('Favorite', favoriteSchema);

module.exports = { Favorite }
---
(client/src/components/views/MovieDetail/Sections/Favorite.js)
import { useEffect } from "react"
import Axios from 'axios'

function Favorite(props) {
    const movieId = props.movieId;                  // Movie ID
    const userFrom = props.userFrom;                // Login User ID
    const movieTitle = props.movieInfo.title;
    const moviePost = props.movieInfo.backdrop_path;
    const movieRunTime = props.movieInfo.runtime;

    useEffect(() => {
        // 얼마나 많은 사람이 이 영화를 Favorite 리스트에 넣었는지 그 숫자 정보 얻기
        let variables = {
            userFrom,
            movieId
        }

        Axios.post('/api/favorite/favoriteNumber', variables)
             .then(response => {
                if(response.data.success) {

                } else {
                    alert('숫자 정보를 가져오는데 실패 했습니다.')
                }
             })

    }, [])

    return (
        <div>
            <button>Favorite</button>
        </div>
    )
}

export default Favorite
---
(client/src/components/views/MovieDetail/MovieDetail.js)
import React, { useEffect, useState } from 'react';
import { API_URL, API_KEY, IMAGE_BASE_URL } from '../../Config';
import MainImage from '../LandingPage/Sections/MainImage';
import MovieInfo from './Sections/MovieInfo';
import GridCards from '../commons/GridCards';
import Favorite from './Sections/Favorite';

import { Row } from 'antd';

function MovieDetail(props) {
    let movieId = props.match.params.movieId
    const [Movie, setMovie] = useState([])
    const [Casts, setCasts] = useState([])
    const [ActorToggle, setActorToggle] = useState(false)

    useEffect(() => {
        let endpointCrew = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`

        let endponitInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}`

        fetch(endponitInfo)
        .then(response => response.json())
        .then(response => {
            console.log(response)
            setMovie(response)
        })

        // 영화 출연자 가져오기
        fetch(endpointCrew)
        .then(response => response.json())
        .then(response => {
            console.log('responseForCrew', response)
            setCasts(response.cast)
        })
    }, [])

    const toggleActorView = () => {
        setActorToggle(!ActorToggle)
    }

    return (
        <div>
            {/* Header */}

            <MainImage
                image={`${IMAGE_BASE_URL}w1280${Movie.backdrop_path}`}
                title={Movie.original_title}
                text={Movie.overview}
            />

            {/* Body */}
            <div style={{ width: '85%', margin : '1rem auto '}}>
                <div style={{ display :'flex', justifyContent : 'flex-end'}} >
                    <Favorite movieInfo={Movie} movieId={movieId} userFrom={localStorage.getItem('userId')}/>
                </div>

                {/* Movie Info */}
                <MovieInfo 
                    movie = {Movie}
                />

                <br />
                {/* Actors Grid */}

                <div style={{display : 'flex', justifyContent : 'center', margin : '2rem' }}>
                    <button onClick={toggleActorView}> Toggle Actor View </button>
                </div>

                {/* ActorToggle 인 경우에만 배우들의 사진을 보여줘라! */}
                {ActorToggle && 
                    <Row gutter={[16, 16]} >
                        {Casts && Casts.map((cast, index) => (
                            <React.Fragment key={index}>
                                <GridCards
                                    image={cast.profile_path ?
                                        // poster_path값이 없을 경우 null값 처리
                                        `${IMAGE_BASE_URL}w500${cast.profile_path}` : null}
                                    characterName={cast.name}
                                />
                            </React.Fragment>
                        ))}
                    </Row>
                }
                

            </div>
        </div>
    )
}

export default MovieDetail
