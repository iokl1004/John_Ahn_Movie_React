12. 무비앱 시리즈 #12 Favorite list에 추가 삭제 ( 따라하며 배우는 리액트 노드 )

1. 특정 영화를 Favorite 리스트에 넣는 기능 만들기
 - Add to Favorite 0
2. 특정 영화를 Favorite 리스트에서 빼는 기능 만들기
 - Remove From Favorite 1

아직 Favorite 리스트에 안넣었을때
 - Add to Favorite list
이미 리스트에 넣어져 있을때
 - Remove From Favorite list
---
(client/src/components/views/MovieDetail/Sections/Favorite.js)
import { useEffect, useState } from "react"
import Axios from 'axios'
import { Button } from 'antd';

function Favorite(props) {
    const movieId = props.movieId;                  // Movie ID
    const userFrom = props.userFrom;                // Login User ID
    const movieTitle = props.movieInfo.title;
    const moviePost = props.movieInfo.backdrop_path;
    const movieRunTime = props.movieInfo.runtime;

    const [FavoriteNumber, setFavoriteNumber] = useState(0)  // Favorite 갯수
    const [Favorited, setFavorited] = useState(false)        // 해당 movie에 대한 Favorite 유무

    let variables = {
        userFrom : userFrom,
        movieI : movieId,
        movieTitle : movieTitle,
        moviePost : moviePost,
        movieRunTime : movieRunTime
    }

    useEffect(() => {
        // 얼마나 많은 사람이 이 영화를 Favorite 리스트에 넣었는지 그 숫자 정보 얻기
        Axios.post('/api/favorite/favoriteNumber', variables)
            .then(response => {
                console.log(response.data)
                setFavoriteNumber(response.data.favoriteNumber)
                if(response.data.success) {
                } else {
                    alert('숫자 정보를 가져오는데 실패 했습니다.')
                }
             })

        // 내가 이 영화를 이미 Favorite 리스트에 넣었는지 아닌지 정보 얻기
        Axios.post('/api/favorite/favorited', variables)
            .then(response => {
            if(response.data.success) {
                setFavorited(response.data.favorited)
            } else {
                alert('정보를 가져오는데 실패 했습니다.')
            }
        })

    }, [])

    const onClickFavorite = () => {
        // 이미 페이보릿이 되어 있는지?
        // 이미 페이보릿이 되어 있다면, 페이보릿 해제와 -1을 한다!
        if(Favorited) {
            Axios.post('/api/favorite/removeFromFavorite', variables)
            .then(response => {
                if(response.data.success) {
                    setFavoriteNumber(FavoriteNumber - 1)
                    setFavorited(!Favorited)
                } else {
                    alert('Favorite 리스트에서 지우는 걸 실패 했습니다.')
                }
            })
        } else {    // 이미 페이보릿이 되어 있지 않다면, 페이보릿을 하고 +1을 한다!
            Axios.post('/api/favorite/addToFavorite', variables)
            .then(response => {
                if(response.data.success) {
                    setFavoriteNumber(FavoriteNumber + 1)
                    setFavorited(!Favorited)
                } else {
                    alert('Favorite 리스트에서 추가 하는 걸 실패 했습니다.')
                }
            })
        }
    }

    return (
        <div>
            {/* Favorite을 누르지 않았더라면 "Not Favorite" 문구 출력, 눌렀을경우 "Add to Favorite" 츨력  */}
            <Button onClick={onClickFavorite}>{Favorited ? "Not Favorite" : "Add to Favorite"} {FavoriteNumber}</Button>
        </div>
    )
}

export default Favorite
---
(server/routes/favorite.js)
const express = require('express');
const router = express.Router();
const { Favorite } = require('../models/Favorite');

// req에는 Favorite.js 파일에서 Axios를 통하여 전달해준 아래의 값들이 담겨져 있다.
// let variables = {
//     userFrom,
//     movieId
// }
// Axios.post('/api/favorite/favoriteNumber', variables)
// body란? index.js 파일을 보면 bodyParser 를 이용하여 프론트에서 보내준 movieId를 받을 수 있다!

router.post('/favoriteNumber', (req, res) => {
    // mongoDB에서 favorite 숫자를 가져오기
    Favorite.find({ "movieId" : req.body.movieId })
    .exec(( err, info) => {
        if(err) return res.status(400).send(err)
        // 그 다음에 프론트에 다시 숫자 정보를 보내주기
        res.status(200).json ({ success : true, favoriteNumber : info.length })
    })
})

router.post('/favorited', (req, res) => { 
    // 내가 이 영화를 Favorite 리스트에 넣었는지 정보를 DB에서 가져오기.
    Favorite.find({ "movieId" : req.body.movieId, "userFrom" : req.body.userFrom })
    .exec(( err, info) => {
        if(err) return res.status(400).send(err)
        // 그 다음에 프론트에 다시 숫자 정보를 보내주기

        let result = false;
        
        // 내가 아직 페이보릿 영화를 넣었다면 true값 반환!
        if(info.length !== 0 ) {
            result = true
        }
        
        res.status(200).json ({ success : true, favorited : result})
    })
})

// 해당 무비를 Favorite 했을 경우, Favorite을 지운다!
router.post('/removeFromFavorite', (req, res) => { 
    Favorite.findOneAndDelete({ movieId : req.body.movieId, userFrom : req.body.userFrom })
    .exec(( err, doc) => {
        if(err) return res.status(400).send(err)
        return res.status(200).json({ success:true, doc })
    })
})

// 해당 무비를 Favorite 하지 않은 상태인 경우, Favorite을 한다!
router.post('/addToFavorite', (req, res) => { 
    // 도큐먼트 인스턴스 생성
    const favorite = new Favorite(req.body)

    favorite.save((err, doc) => {
        if(err) return res.status(400).send(err)
        return res.status(200).json({ success : true })
    })

})

module.exports = router;